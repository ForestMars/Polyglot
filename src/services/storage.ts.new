import { Conversation, UserSettings } from '../types/conversation';

const CONVERSATION_PREFIX = 'conversation_';
const SETTINGS_KEY = 'user_settings';

export class StorageService {
  // Conversation CRUD Operations
  async saveConversation(conversation: Conversation): Promise<void> {
    const key = `${CONVERSATION_PREFIX}${conversation.id}`;
    
    // Ensure messages is an array
    if (!Array.isArray(conversation.messages)) {
      conversation.messages = [];
    }
    
    // Ensure timestamps are set
    const now = new Date();
    conversation.lastModified = now;
    if (!conversation.createdAt) {
      conversation.createdAt = now;
    }
    
    // Save to localStorage
    localStorage.setItem(key, JSON.stringify(conversation));
  }

  async loadConversation(id: string): Promise<Conversation> {
    const key = `${CONVERSATION_PREFIX}${id}`;
    const data = localStorage.getItem(key);
    
    if (!data) {
      throw new Error(`Conversation not found: ${id}`);
    }

    return JSON.parse(data) as Conversation;
  }

  async listConversations(): Promise<Conversation[]> {
    const conversations: Conversation[] = [];
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key?.startsWith(CONVERSATION_PREFIX)) {
        try {
          const conversation = await this.loadConversation(key.replace(CONVERSATION_PREFIX, ''));
          conversations.push(conversation);
        } catch {
          // Skip invalid conversations
          continue;
        }
      }
    }
    
    return conversations.sort((a, b) => 
      new Date(b.lastModified).getTime() - new Date(a.lastModified).getTime()
    );
  }

  async deleteConversation(id: string): Promise<void> {
    const key = `${CONVERSATION_PREFIX}${id}`;
    localStorage.removeItem(key);
  }

  async archiveConversation(id: string): Promise<void> {
    const conversation = await this.loadConversation(id);
    conversation.isArchived = true;
    await this.saveConversation(conversation);
  }

  async unarchiveConversation(id: string): Promise<void> {
    const conversation = await this.loadConversation(id);
    conversation.isArchived = false;
    await this.saveConversation(conversation);
  }

  // Settings Operations
  async saveSettings(settings: UserSettings): Promise<void> {
    localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));
  }

  async loadSettings(): Promise<UserSettings> {
    const data = localStorage.getItem(SETTINGS_KEY);
    if (!data) {
      return this.getDefaultSettings();
    }
    return JSON.parse(data);
  }

  private getDefaultSettings(): UserSettings {
    return {
      selectedProvider: 'ollama',
      selectedModel: 'llama3.2',
      selectedApiKey: '',
      showArchivedChats: false,
      ollamaBaseUrl: 'http://localhost:11434',
    };
  }
}
